#!/usr/bin/env python

import sys
from subprocess import Popen, PIPE

import lummao

LSL_HEADER = rb"""
integer argc;
list argv;
// $?
integer cashquery;

system(string command) {}
string exec(list command_parts) {return "";}
"""


def _compile_script_bytes(lsl_bytes):
    p = Popen(['lummao', '-', '-'], stdout=PIPE, stdin=PIPE, stderr=PIPE)
    output, errors = p.communicate(input=lsl_bytes)
    if p.returncode:
        if errors:
            print(errors.decode("utf8"), file=sys.stderr)
        sys.exit(1)
    new_globals = globals().copy()
    exec(output, new_globals)
    return new_globals["Script"]()


class ShelLSLWrapper:
    script: lummao.BaseLSLScript

    def __init__(self, script, new_argv):
        self.script = script
        self.script.exec = self._exec_wrapper
        self.script.system = self._system_wrapper
        self.script.argc = len(new_argv)
        self.script.argv = new_argv

    def execute(self):
        self.script.execute()

    def _system_wrapper(self, command: str):
        p = Popen(command, shell=True)
        p.wait()
        self.script.cashquery = p.returncode

    def _exec_wrapper(self, command: list):
        p = Popen(command, stdout=PIPE, stdin=PIPE)
        stdout, stderr = p.communicate()
        if stderr:
            print(stderr.decode("utf8"), file=sys.stderr)
        self.script.cashquery = p.returncode
        return stdout.decode("utf8").rstrip("\n")


def main():
    lummao.lslfuncs.llOwnerSay = print

    lsl_file = sys.argv[1]
    with open(lsl_file, "rb") as f:
        lsl_bytes = f.read()
    # strip shebang if present
    if lsl_bytes.startswith(b"#!"):
        lsl_bytes = b"\n".join(lsl_bytes.split(b"\n")[1:])
    script = _compile_script_bytes(LSL_HEADER + lsl_bytes)
    wrapped = ShelLSLWrapper(script, sys.argv[1:])
    wrapped.execute()


if __name__ == "__main__":
    main()
